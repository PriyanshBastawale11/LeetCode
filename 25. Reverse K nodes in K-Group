class ListNode {
    int val;
    ListNode next;

    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) {
            return head;
        }

        // Dummy node to handle edge cases
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        // Initialize pointers
        ListNode prevGroupEnd = dummy;
        ListNode groupStart = head;

        while (true) {
            // Check if there are k nodes to reverse
            ListNode groupEnd = groupStart;
            for (int i = 1; i < k && groupEnd != null; i++) {
                groupEnd = groupEnd.next;
            }

            if (groupEnd == null) {
                break; // Less than k nodes left, no need to reverse
            }

            // Reverse the group
            ListNode nextGroupStart = groupEnd.next;
            reverseGroup(groupStart, groupEnd);

            // Connect the reversed group with previous and next groups
            prevGroupEnd.next = groupEnd;
            groupStart.next = nextGroupStart;

            // Move pointers for the next group
            prevGroupEnd = groupStart;
            groupStart = nextGroupStart;
        }

        return dummy.next;
    }

    private void reverseGroup(ListNode start, ListNode end) {
        ListNode prev = null;
        ListNode current = start;
        ListNode stop = end.next;

        while (current != stop) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        ListNode head1 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        int k1 = 2;
        ListNode result1 = solution.reverseKGroup(head1, k1);
        printList(result1); // Output: 2 1 4 3 5

        // Example 2
        ListNode head2 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        int k2 = 3;
        ListNode result2 = solution.reverseKGroup(head2, k2);
        printList(result2); // Output: 3 2 1 4 5
    }

    // Helper function to print the list
    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
        System.out.println();
    }
}
